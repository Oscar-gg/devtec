// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(cuid())
    name            String?
    email           String?          @unique
    schoolEmail     String?          @unique
    emailVerified   DateTime?
    createdAt       DateTime?        @default(now())
    image           String?
    originalImage   String?
    accounts        Account[]
    sessions        Session[]
    workExperience  WorkExperience[]
    organizations   Organization[]
    userPreferences UserPreferences?
    projectLike     ProjectLike[]
    UserProject     UserProject[]
    UserLink        UserLink[]
}

model UserPreferences {
    id                  String  @id @default(cuid())
    userId              String  @unique
    user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    showGenericImage    Boolean @default(false)
    showEmail           Boolean @default(false)
    showSchoolEmail     Boolean @default(false)
    showProfile         Boolean @default(true)
    showWorkExperience  Boolean @default(true)
    showOrganizations   Boolean @default(true)
    showRelatedProjects Boolean @default(true)
}

model Organization {
    id          String    @id @default(cuid())
    name        String
    description String?
    logo        String?
    url         String
    user        User[]
    approved    Boolean   @default(false)
    Project     Project[]

    @@index([name])
}

model WorkExperience {
    id        String    @id @default(cuid())
    startDate DateTime
    endDate   DateTime?
    position  String
    location  String?
    companyId String
    company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
    userId    String    @unique
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
    id             String           @id @default(cuid())
    name           String
    logo           String?
    WorkExperience WorkExperience[]

    @@index([name])
}

model ProjectLike {
    id        String  @id @default(cuid())
    userId    String
    projectId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

model UserProject {
    id        String  @id @default(cuid())
    userId    String
    projectId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([userId, projectId])
}

model Project {
    id                  String        @id @default(cuid())
    name                String
    description         String
    category            String
    githubUrl           String?
    deploymentUrl       String?
    stars               Int?          @default(0)
    forks               Int?          @default(0)
    createdAt           DateTime      @default(now())
    updatedAt           DateTime      @updatedAt
    organizationId      String?
    programmingLanguage String?
    organization        Organization? @relation(fields: [organizationId], references: [id])
    tags                String[]
    projectLike         ProjectLike[]
    userProject         UserProject[]
}

model UserLink {
    id         String   @id @default(cuid())
    url        String
    userId     String
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    linkTypeId String
    linkType   LinkType @relation(fields: [linkTypeId], references: [id], onDelete: Cascade)
}

model LinkType {
    id       String     @id @default(cuid())
    name     String
    logo     String
    UserLink UserLink[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StatsCache {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    totalProjects Int
    languages     String[]
    percentages   Float[]
}
